#include <fstream>
#include <limits>
#include <unordered_map>
using namespace std;
class GATE 	//simulate a gate with its input and outputs
{
	private:
	string name="";
	int n_inp;
	string out="";
	string *in;
	int i=0;
	public:
	GATE(string s,int no)
	{
		name=s;
		n_inp=no;
		in=new string[n_inp];
	}
	void set_out(string o)
	{
		out=o;
	}
	void set_in(string s)
	{
		in[i]=s;
		i++;	
	}
	string get_in(int ind)
	{
		return in[ind];
	}
	int get_n_inp()
	{
		return n_inp;
	}
	string get_out()
	{
		return out;
	}
	string get_name()
	{
		return name;
	}
};
class Node		//creating separate nodes for linked list
{
	private:
	Node* prev;
	Node* next=nullptr;
	GATE* val;
	public:
	Node(Node* a,GATE* c)
	{
		prev=a;
		val=c;
	}
	void set_next(Node* a)
	{
		next=a;
	}
	Node* get_prev()
	{
		return prev;
	}
	Node* get_next()
	{
		return next;
	}
	GATE* get_val()
	{
		return val;
	}
};
class List 	//create a linked list to store pointers of GATE type
{
	private:
	Node* tail=nullptr;
	Node* head=nullptr;
	Node* current=nullptr;
	public:
	void push_back(GATE* a)
	{
		if(tail!=nullptr)
		{
			Node *temp=new Node(tail,a);
			tail->set_next(temp);
			tail=temp;
		}
		else
		{
			Node *temp=new Node(tail,a);
			tail=temp;
			head=temp;
		}
		current=tail;
	}
	Node* tow_head()
	{
		current=current->get_prev();
		return current;		
	}
	Node* tow_tail()
	{
		current=current->get_next();
		return current;		
	}
	Node* go_first()
	{
		current=head;
		return current;		
	}
	Node* go_last()
	{
		current=tail;
		return current;		
	}
	Node* get_tail()
	{
		return tail;
	}			
};
class CIRCUIT
{
	private:
	#define max(a,b) ((a>b)? a:b)
	#define min(a,b) ((a<b)? a:b)
	unordered_map <string,float> lit; 	 //map from literals to their delays
	unordered_map <string,float> gates; 	//map from gates to their delays
	string i_line="";
	string o_line="";
	string is_line="";	
	List ls;
	void read_gate(string gate)	 //provided the line containing the i/o of the gate simulates the gate in the memory
	{
		static int x=-1;
		string g_name="";
		string no_in="";
		int ind=0;
		for(char ch:gate)
		{
			ind++;
			if(ch==' ')
			{
				break;
			}
			if(isdigit(ch))
			{
				no_in+=ch;
			}
			g_name+=ch;
		}
		GATE *pt;
		int i=1;
		if(no_in!="")
		{
			i=(int)(stof(no_in));
		}
		pt=new GATE(g_name,i);
		string literal="";
		while(i)
		{
			literal="";
			while(gate[ind]!=' ')
			{
				literal+=gate[ind];
				ind++;
			}
			ind++;
			pt->set_in(literal);
			i--;
		}
		literal="";
		while(gate[ind]!='\r' and gate[ind]!='\0')
		{
			literal+=gate[ind];
			ind++;
		}	
		pt->set_out(literal);
		ls.push_back(pt);
	}
	void add_lit(string s,int ind)		//provided the line containing the signals,stores them in the map
	{
		string literal="";
		while((s[ind]!='\r') and (s[ind]!='\0'))
		{
			ind++;
			literal="";
			while((s[ind]!=' ') and (s[ind]!='\r') and (s[ind]!='\0'))
			{
				literal+=s[ind];
				ind++;
			}
			lit[literal]=0;
		}
	}
	bool isspace(char *c)			//checks if a given line contains only whitespaces
	{
		bool f=1;
		int i=0;
		char ch;
		while((c[i]!='\r') and (c[i]!='\0'))
		{	
			ch=c[i];
			if((ch!='\t') and (ch!=' ') and (ch!='\v') and (ch!='\f'))
				f=0;
			i++;
		}
		return f;
	}
	void print(string s,int ind,string line) 		//writes the output file
	{
		ofstream f(s);
		string literal="";
		while((line[ind]!='\r') and (line[ind]!='\0'))
		{
			ind++;
			literal="";
			while((line[ind]!=' ') and (line[ind]!='\r') and (line[ind]!='\0'))
			{
				literal+=line[ind];
				ind++;
			}
			f<<literal<<" "<<lit[literal]<<endl;
		}
		f.close();	
	}
	void calc_inp()			//traverses all the gates to calculate the delay in inputs
	{
		Node* it=ls.go_last();
		GATE* gt;
		float delay;
		float temp;
		do
		{
			gt=it->get_val();
			for(int i=0;i<gt->get_n_inp();i++)
			{
				temp=lit[gt->get_out()]-gates[gt->get_name()];
				delay=min(temp,lit[gt->get_in(i)]);
				lit[gt->get_in(i)]=delay;
			}		
		}while((it=ls.tow_head())!=nullptr);
	}
	void calc_out()			//traverses all the gates to calculate the delay in outputs
	{
		for(auto &x:lit)
		{
			x.second=0;
		}
		Node* it=ls.go_first();
		GATE* gt;
		float delay;
		float temp;
		do
		{
			delay=0;
			gt=it->get_val();
			for(int i=0;i<gt->get_n_inp();i++)
			{
				temp=lit[gt->get_in(i)];
				delay=max(delay,temp);				
			}	
			lit[gt->get_out()]=delay+gates[gt->get_name()];	
		}while((it=ls.tow_tail())!=nullptr);		
	}
	void set_in_map(char* x,unordered_map <string,float> &m)		//used to update both the maps with values.
	{
		if((x[0]=='/' and x[1]=='/') or (x[0]=='\r') or isspace(x))
		{
			return;
		}
		string s1="";
		string s2="";
		int i=0;
		while(x[i]!=' ')
		{
			s1=s1+x[i];
			i++;
		}
		while(x[i])
		{
			s2=s2+x[i];
			i++;
		}
		m[s1]=stof(s2);		
	}
	public:
	void set_req_del(string s)	//sets the primary output delays
	{
		ifstream req_del(s);
		for(auto &x:lit)
		{
			x.second=(numeric_limits<float>::infinity());
		}
		char line[100];
		while(req_del.getline(line,100))
		{	
			set_in_map(line,lit);
		}
		req_del.close();
	}
	void set_gates(string s)		//sets all the delay timings of the gates to the ones provided in the file.
	{
		ifstream g_delays(s);
		char line[100];
		while(g_delays.getline(line,100))
		{	
			set_in_map(line,gates);
		}
		g_delays.close();
	}	
	void sim_circ(string s)		//reads the circuit file
	{
		ifstream net(s);
		char line[100];	
		while(net.getline(line,100))
		{	
			
			if((line[0]=='/' and line[1]=='/') or (line[0]=='\r') or isspace(line))
			{
				continue;
			}
			string s1="";
			int i=0;
			while(line[i]!=' ')
			{
				s1=s1+line[i];
				i++;
			}
			if(s1=="PRIMARY_OUTPUTS")
			{
				o_line=line;
				add_lit(line,15);
			}
			else if(s1=="PRIMARY_INPUTS")
			{
				i_line=line;
				add_lit(line,14);
			}
			else if(s1=="INTERNAL_SIGNALS")
			{
				is_line=line;
				add_lit(line,16);
			}
			else
			{
				read_gate(line);
			}
		}
		net.close();			
	}
	void delay_out(string s)
	{
		calc_out();
		print(s,15,o_line);
	}
	void delay_in(string s)
	{
		calc_inp();
		print(s,14,i_line);
	}
		
};
int main()
{
	CIRCUIT cir;

	//initializes the gates with their delays and stores information about the circuit.
	cir.set_gates("gate_delays.txt");
	cir.sim_circ("circuit.txt");

	//calculates the maximum possible delay in outputs and creates a file storing them
	cir.delay_out("output_delays.txt");

	//initializes the delays of outputs to those in the file.
	cir.set_req_del("required_delays.txt");


	//calculates the delay in inputs and creates a file storing them
	cir.delay_in("input_delays.txt");
}
